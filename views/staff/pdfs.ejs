<!-- views/staff/events.ejs -->
<% include ../../partials/header %>
<script src='/bower_components/pdfmake/build/pdfmake.min.js'></script>
<script src='/bower_components/pdfmake/build/vfs_fonts.js'></script>
<link rel="stylesheet" href="/public/css/tiles.css">

<% if (pdf) { %>
  <script>var pdf = <%- JSON.stringify(pdf) %></script>

  <div class="page-header text-center">
    <h1><span class="fa fa-file-pdf-o fa-2x"></span> Download Event PDFs</h1>
  </div>

  <div class="row text-center">
    <div class="col-sm-4">
      <h3><%= pdf.brides_name %></h3>
    </div>
    <div class="col-sm-4">
      <h3><%= pdf.grooms_name %></h3>
    </div>
    <div class="col-sm-4">
      <h3><%= pdf.ceremony_date %></h3>
    </div>
  </div>

  <hr>

  <div class="row">
    <a href="#" id="designerPDF">
      <div class="col-sm-6">
        <div class="tile tile-primary">
          <h3 class="title">Designer PDF</h3>
          <p>Download the pdf formatted for the designer staff.</p>
        </div>
      </div>
    </a>
    <a href="#" id="customerPDF">
      <div class="col-sm-6">
        <div class="tile tile-primary">
          <h3 class="title">Customer PDF</h3>
          <p>Download the pdf formatted for the customer.</p>
        </div>
      </div>
    </a>
  </div>
<% } else { %>
  <div class="page-header text-center">
    <h1><span class="fa fa-file-pdf-o fa-2x"></span> No PDF Available</h1>
  </div>
<% } %>

<% include ../../partials/footer %>

<script>
function getDocDefinition(type) {
  var docDefinition = {};
  docDefinition.content = getContent(type);
  docDefinition.styles = {
      title: { fontSize: 32, alignment: 'center' },
      bold: { bold: true },
      mainInfo: { fontSize: 20 },
      recipeHeader: { fontSize: 16, alignment: 'center' }
    }
  return docDefinition;
}
$(document).on("click", "#designerPDF", function() {
  var doc_name = pdf.brides_name + "_" + pdf.grooms_name + "_" + pdf.ceremony_date + "_designer_pdf.pdf";
  pdfMake.createPdf(getDocDefinition("designer")).download(doc_name);
});

$(document).on("click", "#customerPDF", function() {
  var doc_name = pdf.brides_name + "_" + pdf.grooms_name + "_" + pdf.ceremony_date + "_customer_pdf.pdf";
  pdfMake.createPdf(getDocDefinition("customer")).download(doc_name);
});

function getContent(type) {
  content = []
  content.push({ text: 'Kistner\'s Flowers\n\n', style: 'title' },
      { width: '33%', text: "Kistner's Flowers", alignment: 'left' },
      { width: '33%', text: "1901 Pillsbury Drive P.O. Box 926", alignment: 'left' },
      { width: '33%', text: 'Manhattan, KS 66502', alignment: 'left' },
      { width: '33%', text: '(785) 776-7989', alignment: 'left' },
      { text: '\n' },
      { width: '33%', text: 'Order Date: ', style: 'bold', alignment: 'left' },
      { width: '33%', text: 'Delivery Date: ', style: 'bold', alignment: 'left' },
      { text: '\n' },
      { text: '\n' },
      { text: 'Customer ', style: 'bold', alignment: 'center' },
      { text: '-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n\n', alignment: 'center' },
      { width: '33%', text: 'Account: ', style: 'bold', alignment: 'left' },
      { width: '33%', text: 'Name: ' + pdf.customer.firstName + ' ' + pdf.customer.lastName, alignment: 'left' },
      { width: '33%', text: 'Address: ' + pdf.customer.street_addr, alignment: 'left' },
      { width: '33%', text: 'City: ' + pdf.customer.city + ', ' + pdf.customer.state + ' ' + pdf.customer.zip, alignment: 'left' },
      { width: '33%', text: 'Telephone: ' + pdf.customer.phone, alignment: 'left' },
      { text: '\n' },
      { text: '\n' },
      { text: 'Recipent ', style: 'bold', alignment: 'center' },
      { text: '-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n\n', alignment: 'center' },
      { width: '33%', text: 'Name: ' + pdf.brides_name, alignment: 'left' },
      { width: '33%', text: 'Address: ', alignment: 'left' },
      { width: '33%', text: 'City: ', alignment: 'left' },
      { width: '33%', text: 'Telephone: ', alignment: 'left' },
      { text: '\n' },
      { text: '\n' },
      { text: 'Product Information', style: 'bold', alignment: 'center' },
      { text: '-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n\n', alignment: 'center' });
      content = getRecipes(type, content, ["Bouquets", "Boutonnieres", "Corsages", "Ceremony Decorations", "Reception Decorations"]);
      return content;
}

function getRecipes(type, content, a) {
  for(var i = 0; i < a.length; i++) {
    var no_items = true;
    var header = pdf[a[i]];
    if(type == "designer") {
      content.push({ text: '\n-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n', alignment: 'center' });
      content.push({ text: '- - - - - - - - - - - - - '+ a[i] +' - - - - - - - - - - - - -', style: 'recipeHeader' });
      content.push({ text: '-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n', alignment: 'center' });
    }
    for(var key in header) {
      if(header[key].recipe_qty > 0) {
        no_items = false;
        if(type == "designer") {
          content.push({ text: key + '\t' + header[key].recipe.total + ' x' + header[key].recipe_qty, style: 'bold' });
          var table = {
            table: {
              headerRows: 1,
              widths: ['50%', '20%', '30%'],
              body: getDesignerRecipeTableBody(header[key].recipe.items),
            }
          }
          content.push(table);
          content.push({ text: '\n' });
          content.push({ text: 'Notes: ' + header[key].notes });
          content.push({ text: '\n\n' });
        }
      }
    }
    if(no_items && type == "designer") {
      content.push({ text: 'No recipes', alignment: 'center' });
    }
  }
  if(type == "customer") {
    var table = {
      table: {
        headerRows: 1,
        widths: ['40%', '20%', '20%', '20%'],
        body: getCustomerRecipeTableBody(a),
      }
    }
    content.push(table);
    content.push({ text: '\n' });
  }
  return content;
}

function getDesignerRecipeTableBody(items) {
  var body = [];
  body.push([ 'Name', 'Quantity', 'Price' ]);
  items.forEach(function(i) {
    body.push([i.item_name, i.item_qty, i.item_price]);
  });
  return body;
}

function getCustomerRecipeTableBody(a) {
  var body = [];
  body.push(['Quantity', 'Description', 'Price', 'Ext. Price']);
  for(var i = 0; i < a.length; i++) {
    console.log(a[i]);
  }
  //console.log(row);
  // for(var key in row) {
  //   if(row[key].recipe_qty > 0) {
  //     var total_cost = parseFloat(row[key].recipe_qty)*parseFloat(row[key].recipe.total.slice(1));
  //     body.push([key, row[key].recipe.total, row[key].recipe_qty, '$'+total_cost.toFixed(2)]);
  //   }
  // }
  return body;
}
</script>
